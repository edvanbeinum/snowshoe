<?php
/**
 *
 * @author Ed van Beinum <e@edvanbeinum.com>
 * @version $Id$
 * @copyright Ibuildings 07/08/2011
 * @package SnowshoeTest
 */

require_once dirname(__FILE__) . '/../../../Snowshoe/bootstrap.php';

/**
 * Test class for Page.
 * Generated by PHPUnit on 2011-08-07 at 21:53:52.
 */
class NavigationTest extends PHPUnit_Framework_TestCase
{
    protected $_navigation;

    public function setUp()
    {
        $fileSystem = $this->getMock('\Snowshoe\Helper\FileSystem');
        $page = $this->getMock('\Snowshoe\Helper\Page', array(), array(), '', FALSE);
        $config = $this->getMock('\Snowshoe\Config\App', array('getNavigationSortCriteria', 'getNavigationSortDirection'));
        $config->expects($this->any())
                ->method('getNavigationSortCriteria')
                ->will($this->returnValue('alpha'));
        $config->expects($this->any())
                ->method('getNavigationSortDirection')
                ->will($this->returnValue('desc'));
        $this->_navigation = new \Snowshoe\Helper\Navigation($fileSystem, $page, $config);
    }

    public function tearDown()
    {
        unset($this->_navigation);
    }

    /**
     * @test
     */
    public function getSortedNavigation_returns_expected_array()
    {

        $contentFileOne = $this->getMock('splFileInfo', array('getFilename'), array(), '', FALSE);
        $contentFileOne->expects($this->any())
                ->method('getFilename')
                ->will($this->returnValue('aardvark'));
        $contentFileTwo = $this->getMock('splFileInfo', array('getFilename'), array(), '', FALSE);
        $contentFileTwo->expects($this->any())
                ->method('getFilename')
                ->will($this->returnValue('Zebra'));

        $expected = array($contentFileTwo, $contentFileOne);
        $this->assertSame(
            $expected,
            $this->_navigation->getSortedNavigation(array($contentFileOne, $contentFileTwo))
        );
    }

    /**
     * @test
     */
    public function getPrimaryNavigation_returns_expected_result()
    {
        $contentFileOne = $this->getMock('splFileInfo', array('getFilename'), array(), '', FALSE);
        $contentFileOne->expects($this->any())
                ->method('getFilename')
                ->will($this->returnValue('aardvark'));
        $contentFileTwo = $this->getMock('splFileInfo', array('getFilename'), array(), '', FALSE);
        $contentFileTwo->expects($this->any())
                ->method('getFilename')
                ->will($this->returnValue('Zebra'));

        $fileSystem = $this->getMock('\Snowshoe\Helper\FileSystem');
        $page = $this->getMock('\Snowshoe\Helper\Page', array(), array(), '', FALSE);
        $config = $this->getMock('\Snowshoe\Config\App');

        $navigation = $this->getMock('\Snowshoe\Helper\Navigation', array('getSortedNavigation', '_getPageUrl', '_getPageTitle'), array($fileSystem, $page, $config));
        $navigation->expects($this->once())
                ->method('getSortedNavigation')
                ->will($this->returnValue(array($contentFileOne, $contentFileTwo)));
        $navigation->expects($this->any())
                ->method('_getPageUrl')
                ->will($this->returnValue('path/to/file'));
        $navigation->expects($this->any())
                ->method('_getPageTitle')
                ->will($this->returnValue('TestTitle'));

        $expected = array(
            array(
                'url' => 'path/to/file',
                'title' => 'TestTitle'
            ),
            array(
                'url' => 'path/to/file',
                'title' => 'TestTitle'
            )
        );
        $result = $navigation->getPrimaryNavigation(array($contentFileOne, $contentFileTwo));
        
        $this->assertSame(
            $expected,
            $result
        );
    }
}